import numpy as np
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn import tree,datasets,svm,metrics
from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.metrics import accuracy_score

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#dataset
cifar10 = fetch_openml('cifar_10', version=1, cache=True)

# Converte os rótulos para inteiros
y = y.astype(np.uint8)

# Normaliza os dados
X_train = X_train / 255.0
X_test = X_test / 255.0

X = cifar10.data
y = cifar10.target

#modelo1 
sgdClf = SGDClassifier(random_state=42)
sgdClf.fit(X_train,y_train)
sgdClf.predict(X_train)

esperado = y_test
predito = sgdClf.predict(X_test)
print(f"Relatório de Classificação: {sgdClf}\n{metrics.classification_report(esperado, predito)}\n")

#modelo2
clf = tree.DecisionTreeClassifier()
clf.fit(X_train,y_train)
yPred = clf.predict(X_test)

esperado2 = y_test
predito2 = sgdClf.predict(X_test)
print(f"Relatório de Classificação: {clf}\n{metrics.classification_report(esperado2, predito2)}\n")

#modelo3
randomF = ensemble.RandomForestClassifier(random_state=1)
randomF.fit(X_train,y_train)

esperado3 = y_test
predito3 = randomF.predict(X_test)
print(f"Relatório de Classificação: {randomF}\n{metrics.classification_report(esperado3, predito3)}\n")
